name: Build time integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-build-time-integration:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        working-directory: build-time-integration
        run: |
          npm install

      - name: Lint Display
        working-directory: build-time-integration
        run: |
          npx nx run display:lint
      - name: Lint Main
        working-directory: build-time-integration
        run: |
          npx nx run main:lint

  deploy-build-time-integration:
    needs:
      - test-build-time-integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy contents
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          source: "build-time-integration"
          target: "/var/www/microfrontend-coursework"

      - name: Building App
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          script: >
            cd /var/www/microfrontend-coursework/build-time-integration
            && docker-compose down && docker-compose up -d


  test-client-side-integration-display:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client-side-integration/display

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          npm install

      - name: Lint
        run: |
          npx eslint src
      - name: Unit tests
        run: |
          npx jest

  test-client-side-integration-main:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client-side-integration/main

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          npm install

      - name: Lint
        run: |
          npx eslint src

  deploy-client-side-integration:
    needs:
      - test-client-side-integration-display
      - test-client-side-integration-main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy contents
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          source: "client-side-integration"
          target: "/var/www/microfrontend-coursework"

      - name: Building App
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          script: >
            cd /var/www/microfrontend-coursework/client-side-integration
            && docker-compose down && docker-compose up -d

  test-iframe-integration-main:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iframe-integration/main

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          npm install

      - name: Lint
        run: |
          npx eslint src

  test-iframe-integration-display:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iframe-integration/display

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          npm install

      - name: Lint
        run: |
          npx eslint src
  deploy-iframe-integration:
    needs:
      - test-iframe-integration-display
      - test-iframe-integration-main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy contents
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          source: "iframe-integration"
          target: "/var/www/microfrontend-coursework"

      - name: Building App
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          script: >
            cd /var/www/microfrontend-coursework/iframe-integration
            && docker-compose down && docker-compose up -d


  test-web-component-integration-display:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web-component-integration/display

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          npm install

      - name: Lint
        run: |
          npx eslint src
  test-web-component-integration-main:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web-component-integration/main

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          npm install

      - name: Lint
        run: |
          npx eslint src

  deploy-web-component-integration:
    needs:
      - test-web-component-integration-display
      - test-web-component-integration-main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy contents
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          source: "web-component-integration"
          target: "/var/www/microfrontend-coursework"

      - name: Building App
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          script: >
            cd /var/www/microfrontend-coursework/web-component-integration
            && docker-compose down && docker-compose up -d

  deploy-server-side-includes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy contents
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          source: "server-side-includes"
          target: "/var/www/microfrontend-coursework"

      - name: Building App
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          password: ${{secrets.PASSWORD}}
          port: ${{secrets.PORT}}
          script: >
            cd /var/www/microfrontend-coursework/server-side-includes
            && docker-compose down && docker-compose up -d

